# This directory is where your application will access the database.
fuse:
  dir: '${LITEFS_DIR}'

# This directory is where LiteFS will store internal data.
# You must place this directory on a persistent volume.
data:
  dir: '/data/litefs'

lease:
  type: 'consul'

  # Specifies if this node can become primary. The expression below evaluates
  # to true on nodes that are run in the primary region. Nodes in other regions
  # act as non-candidate, read-only replicas.
  # candidate: ${FLY_REGION == 'sea'}
  #
  # In this particular app, we have one instance per region and writes don't
  # need to be in the primary region, so either instance is allowed to be a
  # candidate.
  candidate: true

  # If true, then the node will automatically become primary after it has
  # connected with the cluster and sync'd up. This makes it easier to run
  # migrations on start up.
  promote: true

  # The API URL that other nodes will use to connect to this node.
  advertise-url: 'http://${HOSTNAME}.vm.${FLY_APP_NAME}.internal:20202'

  consul:
    # The URL of the Consul cluster.
    url: '${FLY_CONSUL_URL}'

    # A unique key shared by all nodes in the LiteFS cluster.
    # Change this if you are running multiple clusters in a single app!
    key: '${FLY_APP_NAME}/primary'

proxy:
  # Bind address for the proxy to listen on.
  addr: ':${INTERNAL_PORT}'

  # Hostport of your application.
  target: 'localhost:${PORT}'

  # Filename of the SQLite database you want to use for TXID tracking.
  db: '${DATABASE_FILE_PATH}'

# This flag ensure that LiteFS continues to run if there is an issue on startup.
# It makes it easy to ssh in and debug any issues you might be having rather
# than continually restarting on initialization failure.
exit-on-error: false

exec:
  # Only run migrations on candidate nodes. Combined with `promote: true` above,
  # this ensures that migrations are only run on the primary node.
  - cmd: npx prisma migrate deploy
    if-candidate: true

  # Then run the application on all nodes.
  - cmd: npm run start
